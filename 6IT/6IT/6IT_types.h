/* The 6IT Project. Copyright 2015 Conrad Rozetti, crz@6itproject.org. Distributed under the MIT License, see 6IT.h. */

#pragma once

// todo crz: I'm not too sure about all this

#include <inttypes.h>

typedef int32_t data_type_t;
typedef int32_t opcode_t;
typedef int32_t operand_t;
typedef int32_t scope_t;

typedef int token_type_t;
typedef int token_id_t;

enum h6vm_operand_types
{
	H6VM_INVALID = 0,
	H6VM_REG_REL,
	H6VM_REG_ABS,
	H6VM_EXPR,
	H6VM_PC,
	H6VM_FPC, // crz: relative to start of function, fixable
	H6VM_IPC, // crz: relative to start of function, not fixable
	H6VM_ADDR,
	H6VM_INT16,
	H6VM_INT32,
	H6VM_INT64L,
	H6VM_INT64H,
	H6VM_FP32,
	H6VM_FP64L,
	H6VM_FP64H,
	H6VM_STR,
	H6VM_FUNC,
	H6VM_REG_SPECIAL,

	H6VM_INT16_INT16,
	H6VM_INT16_FPC16,
	H6VM_INT16_IPC16,
};

// todo crz: this is a mess

enum h6vm_type_private
{
	TYPE_INVALID = 0,
	TYPE_VALID = 1,

	TYPE_SIZE_BIT1 = TYPE_VALID << 1,
	TYPE_SIZE_BIT2 = TYPE_SIZE_BIT1 << 1,
	TYPE_SIZE_BIT3 = TYPE_SIZE_BIT2 << 1,
	TYPE_SIZE_VOID = 0,
	TYPE_SIZE_DERIVED = TYPE_SIZE_BIT1,
	TYPE_SIZE_8BITS = TYPE_SIZE_BIT2,
	TYPE_SIZE_16BITS = TYPE_SIZE_BIT2 + TYPE_SIZE_BIT1,
	TYPE_SIZE_32BITS = TYPE_SIZE_BIT3,
	TYPE_SIZE_64BITS = TYPE_SIZE_BIT3 | TYPE_SIZE_BIT1,
	TYPE_SIZE_MASK = TYPE_SIZE_BIT3 | TYPE_SIZE_BIT2 | TYPE_SIZE_BIT1,

	TYPE_REAL_BIT1 = TYPE_SIZE_BIT3 << 1,
	TYPE_INTEGRAL = 0,
	TYPE_REAL = TYPE_REAL_BIT1,
	TYPE_REAL_MASK = TYPE_REAL_BIT1,

	TYPE_SIGNED_BIT1 = TYPE_REAL_BIT1 << 1,
	TYPE_SIGNED = 0,
	TYPE_UNSIGNED = TYPE_SIGNED_BIT1,
	TYPE_SIGNED_MASK = TYPE_SIGNED_BIT1,

	TYPE_CONST_BIT1 = TYPE_SIGNED_BIT1 << 1,
	TYPE_NON_CONST = 0,
	TYPE_CONST = TYPE_CONST_BIT1,
	TYPE_CONST_MASK = TYPE_CONST_BIT1,

	TYPE_EXTERN_BIT1 = TYPE_CONST_BIT1 << 1,
	TYPE_NON_EXTERN = 0,
	TYPE_EXTERN = TYPE_EXTERN_BIT1,
	TYPE_EXTERN_MASK = TYPE_EXTERN_BIT1,

	TYPE_POINTER_BIT1 = TYPE_EXTERN_BIT1 << 1,
	TYPE_POINTER_BIT2 = TYPE_POINTER_BIT1 << 1,
	TYPE_VALUE = 0,
	TYPE_POINTER = TYPE_POINTER_BIT1,
	TYPE_POINTER2 = TYPE_POINTER_BIT2,
	TYPE_POINTER3 = TYPE_POINTER_BIT2 + TYPE_POINTER_BIT1,
	TYPE_POINTER_MASK = TYPE_POINTER_BIT2 | TYPE_POINTER_BIT1,

	TYPE_DERIVED_BIT1 = TYPE_POINTER_BIT2 << 1,
	TYPE_DERIVED_BIT2 = TYPE_DERIVED_BIT1 << 1,
	TYPE_NOT_DERIVED = 0,
	TYPE_DERIVED1 = TYPE_DERIVED_BIT1,
	TYPE_DERIVED2 = TYPE_DERIVED_BIT2,
	TYPE_DERIVED3 = TYPE_DERIVED_BIT2 | TYPE_DERIVED_BIT1,
	TYPE_DERIVED_MASK = TYPE_CONST_BIT1,
};

enum data_type
{
	TYPE_VOID = TYPE_VALID | TYPE_SIZE_VOID,
	TYPE_CHAR = TYPE_VALID | TYPE_SIZE_8BITS,
	TYPE_SHORT = TYPE_VALID | TYPE_SIZE_16BITS,
	TYPE_INT = TYPE_VALID | TYPE_SIZE_32BITS,
	TYPE_LONG = TYPE_VALID | TYPE_SIZE_64BITS,
	TYPE_FLOAT = TYPE_VALID | TYPE_SIZE_32BITS | TYPE_REAL,
	TYPE_DOUBLE = TYPE_VALID | TYPE_SIZE_64BITS | TYPE_REAL,

	TYPE_STRUCT = TYPE_VALID | TYPE_SIZE_DERIVED | TYPE_DERIVED1,
	TYPE_UNION = TYPE_VALID | TYPE_SIZE_DERIVED | TYPE_DERIVED2,
	TYPE_VARARG = TYPE_VALID | TYPE_SIZE_DERIVED | TYPE_DERIVED3,

	//TYPE_CONST = 1 << 7,
	//TYPE_UNSIGNED = 1 << 6,
	//TYPE_POINTER = 1 << 5,
	//TYPE_POINTER_POINTER = 1 << 4,
	TYPE_BASE_MASK = TYPE_VALID | TYPE_SIZE_MASK | TYPE_REAL_MASK,

	TYPE_CHAR_CONST_PTR = TYPE_CHAR | TYPE_CONST | TYPE_POINTER,
	TYPE_EXPRESSION = TYPE_VALID | TYPE_SIZE_16BITS | TYPE_DERIVED1
};
