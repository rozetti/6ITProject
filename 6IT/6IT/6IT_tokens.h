/* The 6IT Project. Copyright 2015 Conrad Rozetti, crz@6itproject.org. Distributed under the MIT License, see 6IT.h. */

#pragma once

enum token_types
{
	TOKEN_TYPE_INVALID = 0,
	TOKEN_TYPE_EOF,
	TOKEN_TYPE_SYMBOL,
	TOKEN_TYPE_IDENTIFIER,
	TOKEN_TYPE_NUMBER,
	TOKEN_TYPE_CHAR,
	TOKEN_TYPE_STRING,
};

// todo crz: rename these so as to reflect that they are 'standard' symbol tokens, and complete the list

enum tokens
{
	TOKEN_INVALID = 0, // crz: don't use this
	TOKEN_EQUALS,
	TOKEN_EQUALS_EQUALS,
	TOKEN_BANG_EQUALS,
	TOKEN_GREATER_THAN,
	TOKEN_GREATER_THAN_OR_EQUAL,
	TOKEN_LESS_THAN,
	TOKEN_LESS_THAN_OR_EQUAL,
	TOKEN_OPEN_PAREN,
	TOKEN_CLOSE_PAREN,
	TOKEN_OPEN_SQUARE_BRACKET,
	TOKEN_CLOSE_SQUARE_BRACKET,
	TOKEN_OPEN_BRACE,
	TOKEN_CLOSE_BRACE,
	TOKEN_SEMI_COLON,
	TOKEN_COMMA,
	TOKEN_PLUS,
	TOKEN_PLUSPLUS,
	TOKEN_MINUS,
	TOKEN_MINUSMINUS,
	TOKEN_FORWARD_SLASH,
	TOKEN_ASTERISK,
	TOKEN_PERCENT,
	TOKEN_DOT,
	TOKEN_HAT,
	TOKEN_BANG,
	TOKEN_HASH,
	TOKEN_QUESTION_MARK,
	TOKEN_COLON,
	TOKEN_AT,
	TOKEN_TILDE,
	TOKEN_AND,
	TOKEN_PIPE,
	TOKEN_ANDAND,
	TOKEN_PIPEPIPE,
	TOKEN_LESS_LESS,
	TOKEN_GREATER_GREATER,

	TOKEN_PLUS_EQUALS,
	TOKEN_MINUS_EQUALS,
	TOKEN_ASTERISK_EQUALS,
	TOKEN_FORWARD_SLASH_EQUALS,
	TOKEN_PERCENT_EQUALS,
	TOKEN_AND_EQUALS,
	TOKEN_PIPE_EQUALS,
	TOKEN_HAT_EQUALS,
	TOKEN_LESS_LESS_EQUALS,
	TOKEN_GREATER_GREATER_EQUALS,

	TOKEN_MINUS_GREATER,
};
