/* The 6IT Project. Copyright 2015 Conrad Rozetti, crz@6itproject.org. Distributed under the MIT License, see 6IT.h. */

#pragma once

enum evaluator_opcodes
{
	EVALUATOR_OPCODE_TERMINATOR = -1,
	EVALUATOR_OPCODE_INVALID = 0,

	//crz: stack ops

	EVALUATOR_OPCODE_DROP,

	EVALUATOR_OPCODE_PUSH_FREG,
	EVALUATOR_OPCODE_PUSH_SREG,

	EVALUATOR_OPCODE_PUSH_FREG_FP32,
	EVALUATOR_OPCODE_PUSH_SREG_FP32,
	
	EVALUATOR_OPCODE_PUSH_INTEGER,
	EVALUATOR_OPCODE_PUSH_FLOAT,
	EVALUATOR_OPCODE_PUSH_STRING,

	// crz: integer binary operations

	EVALUATOR_OPCODE_CAST_FP32,
	EVALUATOR_OPCODE_CAST_INT,
	EVALUATOR_OPCODE_CAST_FP32_INT,
	EVALUATOR_OPCODE_CAST_INT_FP32,

	EVALUATOR_OPCODE_IADD,
	EVALUATOR_OPCODE_ISUB,
	EVALUATOR_OPCODE_IMUL,
	EVALUATOR_OPCODE_IDIV,
	EVALUATOR_OPCODE_IMOD,

	EVALUATOR_OPCODE_ADD,
	EVALUATOR_OPCODE_SUB,
	EVALUATOR_OPCODE_MUL,
	EVALUATOR_OPCODE_DIV,
	EVALUATOR_OPCODE_MOD,

	// crz: integer unary ops

	EVALUATOR_OPCODE_MINUS,
	EVALUATOR_OPCODE_PLUS,
	EVALUATOR_OPCODE_LNOT,

	// crz: float unary ops 

	EVALUATOR_OPCODE_IADD_FP32,
	EVALUATOR_OPCODE_ISUB_FP32,
	EVALUATOR_OPCODE_IMUL_FP32,
	EVALUATOR_OPCODE_IDIV_FP32,
	EVALUATOR_OPCODE_MINUS_FP32,
	EVALUATOR_OPCODE_PLUS_FP32,

	// crz: float binary ops 

	EVALUATOR_OPCODE_ADD_FP32,
	EVALUATOR_OPCODE_SUB_FP32,
	EVALUATOR_OPCODE_MUL_FP32,
	EVALUATOR_OPCODE_DIV_FP32,
	
	// crz: absolute register ops

	EVALUATOR_OPCODE_ALLOC_SREG,
	EVALUATOR_OPCODE_ASSIGN_SREG,
	EVALUATOR_OPCODE_ASSIGN_SREG_FP32,

	// crz: absolute compound assignment

	EVALUATOR_OPCODE_ASSIGN_SREG_ADD,
	EVALUATOR_OPCODE_ASSIGN_SREG_SUB,
	EVALUATOR_OPCODE_ASSIGN_SREG_MUL,
	EVALUATOR_OPCODE_ASSIGN_SREG_DIV,
	EVALUATOR_OPCODE_ASSIGN_SREG_MOD,

	EVALUATOR_OPCODE_ASSIGN_SREG_ADD_FP32,
	EVALUATOR_OPCODE_ASSIGN_SREG_SUB_FP32,
	EVALUATOR_OPCODE_ASSIGN_SREG_MUL_FP32,
	EVALUATOR_OPCODE_ASSIGN_SREG_DIV_FP32,

	// crz: relative register ops
	
	EVALUATOR_OPCODE_ALLOC_FREG,
	EVALUATOR_OPCODE_ASSIGN_FREG,
	EVALUATOR_OPCODE_ASSIGN_FREG_FP32,

	// crz: relative compound assignment

	EVALUATOR_OPCODE_ASSIGN_FREG_ADD,
	EVALUATOR_OPCODE_ASSIGN_FREG_SUB,
	EVALUATOR_OPCODE_ASSIGN_FREG_MUL,
	EVALUATOR_OPCODE_ASSIGN_FREG_DIV,
	EVALUATOR_OPCODE_ASSIGN_FREG_MOD,

	EVALUATOR_OPCODE_ASSIGN_FREG_ADD_FP32,
	EVALUATOR_OPCODE_ASSIGN_FREG_SUB_FP32,
	EVALUATOR_OPCODE_ASSIGN_FREG_MUL_FP32,
	EVALUATOR_OPCODE_ASSIGN_FREG_DIV_FP32,

	// crz: unary assignment

	EVALUATOR_OPCODE_FREG_PREINC,
	EVALUATOR_OPCODE_FREG_POSTINC,
	EVALUATOR_OPCODE_FREG_PREDEC,
	EVALUATOR_OPCODE_FREG_POSTDEC,
	EVALUATOR_OPCODE_SREG_PREINC,
	EVALUATOR_OPCODE_SREG_POSTINC,
	EVALUATOR_OPCODE_SREG_PREDEC,
	EVALUATOR_OPCODE_SREG_POSTDEC,

	// crz: comparison ops

	EVALUATOR_OPCODE_LT,
	EVALUATOR_OPCODE_LE,
	EVALUATOR_OPCODE_GT,
	EVALUATOR_OPCODE_GE,
	EVALUATOR_OPCODE_EQ,
	EVALUATOR_OPCODE_NE,
	
	EVALUATOR_OPCODE_LT_FP32,
	EVALUATOR_OPCODE_LE_FP32,
	EVALUATOR_OPCODE_GT_FP32,
	EVALUATOR_OPCODE_GE_FP32,
	EVALUATOR_OPCODE_EQ_FP32,
	EVALUATOR_OPCODE_NE_FP32,

	// crz: dispatch
	
	EVALUATOR_OPCODE_BUILTIN,
	EVALUATOR_OPCODE_NATIVE,
	EVALUATOR_OPCODE_CALL,
	EVALUATOR_OPCODE_LUACALL,
	EVALUATOR_OPCODE_UNRESOLVED_EXPERNAL_CALL,
};
